Help on class BeautifulSoup in module bs4:

class BBeeaauuttiiffuullSSoouupp(bs4.element.Tag)
 |  BeautifulSoup(markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)
 |  
 |  A data structure representing a parsed HTML or XML document.
 |  
 |  Most of the methods you'll call on a BeautifulSoup object are inherited from
 |  PageElement or Tag.
 |  
 |  Internally, this class defines the basic interface called by the
 |  tree builders when converting an HTML/XML document into a data
 |  structure. The interface abstracts away the differences between
 |  parsers. To write a new tree builder, you'll need to understand
 |  these methods as a whole.
 |  
 |  These methods will be called by the BeautifulSoup constructor:
 |    * reset()
 |    * feed(markup)
 |  
 |  The tree builder may call these methods from its feed() implementation:
 |    * handle_starttag(name, attrs) # See note about return value
 |    * handle_endtag(name)
 |    * handle_data(data) # Appends to the current data node
 |    * endData(containerClass) # Ends the current data node
 |  
 |  No matter how complicated the underlying parser is, you should be
 |  able to build a tree using 'start tag' events, 'end tag' events,
 |  'data' events, and "done with data" events.
 |  
 |  If you encounter an empty-element tag (aka a self-closing tag,
 |  like HTML's <br> tag), call handle_starttag and then
 |  handle_endtag.
 |  
 |  Method resolution order:
 |      BeautifulSoup
 |      bs4.element.Tag
 |      bs4.element.PageElement
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____ccooppyy____(self)
 |      Copy a BeautifulSoup object by converting the document to a string and parsing it again.
 |  
 |  ____ggeettssttaattee____(self)
 |      Helper for pickle.
 |  
 |  ____iinniitt____(self, markup='', features=None, builder=None, parse_only=None, from_encoding=None, exclude_encodings=None, element_classes=None, **kwargs)
 |      Constructor.
 |      
 |      :param markup: A string or a file-like object representing
 |       markup to be parsed.
 |      
 |      :param features: Desirable features of the parser to be
 |       used. This may be the name of a specific parser ("lxml",
 |       "lxml-xml", "html.parser", or "html5lib") or it may be the
 |       type of markup to be used ("html", "html5", "xml"). It's
 |       recommended that you name a specific parser, so that
 |       Beautiful Soup gives you the same results across platforms
 |       and virtual environments.
 |      
 |      :param builder: A TreeBuilder subclass to instantiate (or
 |       instance to use) instead of looking one up based on
 |       `features`. You only need to use this if you've implemented a
 |       custom TreeBuilder.
 |      
 |      :param parse_only: A SoupStrainer. Only parts of the document
 |       matching the SoupStrainer will be considered. This is useful
 |       when parsing part of a document that would otherwise be too
 |       large to fit into memory.
 |      
 |      :param from_encoding: A string indicating the encoding of the
 |       document to be parsed. Pass this in if Beautiful Soup is
 |       guessing wrongly about the document's encoding.
 |      
 |      :param exclude_encodings: A list of strings indicating
 |       encodings known to be wrong. Pass this in if you don't know
 |       the document's encoding but you know Beautiful Soup's guess is
 |       wrong.
 |      
 |      :param element_classes: A dictionary mapping BeautifulSoup
 |       classes like Tag and NavigableString, to other classes you'd
 |       like to be instantiated instead as the parse tree is
 |       built. This is useful for subclassing Tag or NavigableString
 |       to modify default behavior.
 |      
 |      :param kwargs: For backwards compatibility purposes, the
 |       constructor accepts certain keyword arguments used in
 |       Beautiful Soup 3. None of these arguments do anything in
 |       Beautiful Soup 4; they will result in a warning and then be
 |       ignored.
 |       
 |       Apart from this, any keyword arguments passed into the
 |       BeautifulSoup constructor are propagated to the TreeBuilder
 |       constructor. This makes it possible to configure a
 |       TreeBuilder by passing in arguments, not just by saying which
 |       one to use.
 |  
 |  ddeeccooddee(self, pretty_print=False, eventual_encoding='utf-8', formatter='minimal')
 |      Returns a string or Unicode representation of the parse tree
 |          as an HTML or XML document.
 |      
 |      :param pretty_print: If this is True, indentation will be used to
 |          make the document more readable.
 |      :param eventual_encoding: The encoding of the final document.
 |          If this is None, the document will be a Unicode string.
 |  
 |  eennddDDaattaa(self, containerClass=None)
 |      Method called by the TreeBuilder when the end of a data segment
 |      occurs.
 |  
 |  hhaannddllee__ddaattaa(self, data)
 |      Called by the tree builder when a chunk of textual data is encountered.
 |  
 |  hhaannddllee__eennddttaagg(self, name, nsprefix=None)
 |      Called by the tree builder when an ending tag is encountered.
 |      
 |      :param name: Name of the tag.
 |      :param nsprefix: Namespace prefix for the tag.
 |  
 |  hhaannddllee__ssttaarrttttaagg(self, name, namespace, nsprefix, attrs, sourceline=None, sourcepos=None, namespaces=None)
 |      Called by the tree builder when a new tag is encountered.
 |      
 |      :param name: Name of the tag.
 |      :param nsprefix: Namespace prefix for the tag.
 |      :param attrs: A dictionary of attribute values.
 |      :param sourceline: The line number where this tag was found in its
 |          source document.
 |      :param sourcepos: The character position within `sourceline` where this
 |          tag was found.
 |      :param namespaces: A dictionary of all namespace prefix mappings 
 |          currently in scope in the document.
 |      
 |      If this method returns None, the tag was rejected by an active
 |      SoupStrainer. You should proceed as if the tag had not occurred
 |      in the document. For instance, if this was a self-closing tag,
 |      don't call handle_endtag.
 |  
 |  iinnsseerrtt__aafftteerr(self, *args)
 |      This method is part of the PageElement API, but `BeautifulSoup` doesn't implement
 |      it because there is nothing before or after it in the parse tree.
 |  
 |  iinnsseerrtt__bbeeffoorree(self, *args)
 |      This method is part of the PageElement API, but `BeautifulSoup` doesn't implement
 |      it because there is nothing before or after it in the parse tree.
 |  
 |  nneeww__ssttrriinngg(self, s, subclass=None)
 |      Create a new NavigableString associated with this BeautifulSoup
 |      object.
 |  
 |  nneeww__ttaagg(self, name, namespace=None, nsprefix=None, attrs={}, sourceline=None, sourcepos=None, **kwattrs)
 |      Create a new Tag associated with this BeautifulSoup object.
 |      
 |      :param name: The name of the new Tag.
 |      :param namespace: The URI of the new Tag's XML namespace, if any.
 |      :param prefix: The prefix for the new Tag's XML namespace, if any.
 |      :param attrs: A dictionary of this Tag's attribute values; can
 |          be used instead of `kwattrs` for attributes like 'class'
 |          that are reserved words in Python.
 |      :param sourceline: The line number where this tag was
 |          (purportedly) found in its source document.
 |      :param sourcepos: The character position within `sourceline` where this
 |          tag was (purportedly) found.
 |      :param kwattrs: Keyword arguments for the new Tag's attribute values.
 |  
 |  oobbjjeecctt__wwaass__ppaarrsseedd(self, o, parent=None, most_recent_element=None)
 |      Method called by the TreeBuilder to integrate an object into the parse tree.
 |  
 |  ppooppTTaagg(self)
 |      Internal method called by _popToTag when a tag is closed.
 |  
 |  ppuusshhTTaagg(self, tag)
 |      Internal method called by handle_starttag when a tag is opened.
 |  
 |  rreesseett(self)
 |      Reset this object to a state as though it had never parsed any
 |      markup.
 |  
 |  ssttrriinngg__ccoonnttaaiinneerr(self, base_class=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  AASSCCIIII__SSPPAACCEESS = ' \n\t\x0c\r'
 |  
 |  DDEEFFAAUULLTT__BBUUIILLDDEERR__FFEEAATTUURREESS = ['html', 'fast']
 |  
 |  NNOO__PPAARRSSEERR__SSPPEECCIIFFIIEEDD__WWAARRNNIINNGG = 'No parser was explicitly specified, so ...
 |  
 |  RROOOOTT__TTAAGG__NNAAMMEE = '[document]'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from bs4.element.Tag:
 |  
 |  ____bbooooll____(self)
 |      A tag is non-None even if it has no contents.
 |  
 |  ____ccaallll____(self, *args, **kwargs)
 |      Calling a Tag like a function is the same as calling its
 |      find_all() method. Eg. tag('a') returns a list of all the A tags
 |      found within this tag.
 |  
 |  ____ccoonnttaaiinnss____(self, x)
 |  
 |  ____ddeelliitteemm____(self, key)
 |      Deleting tag[key] deletes all 'key' attributes for the tag.
 |  
 |  ____eeqq____(self, other)
 |      Returns true iff this Tag has the same name, the same attributes,
 |      and the same contents (recursively) as `other`.
 |  
 |  ____ggeettaattttrr____(self, tag)
 |      Calling tag.subtag is the same as calling tag.find(name="subtag")
 |  
 |  ____ggeettiitteemm____(self, key)
 |      tag[key] returns the value of the 'key' attribute for the Tag,
 |      and throws an exception if it's not there.
 |  
 |  ____hhaasshh____(self)
 |      Return hash(self).
 |  
 |  ____iitteerr____(self)
 |      Iterating over a Tag iterates over its contents.
 |  
 |  ____lleenn____(self)
 |      The length of a Tag is the length of its list of contents.
 |  
 |  ____nnee____(self, other)
 |      Returns true iff this Tag is not identical to `other`,
 |      as defined in __eq__.
 |  
 |  ____rreepprr____ = __unicode__(self)
 |  
 |  ____sseettiitteemm____(self, key, value)
 |      Setting tag[key] sets the value of the 'key' attribute for the
 |      tag.
 |  
 |  ____ssttrr____ = __unicode__(self)
 |  
 |  ____uunniiccooddee____(self)
 |      Renders this PageElement as a Unicode string.
 |  
 |  cchhiillddGGeenneerraattoorr(self)
 |      Deprecated generator.
 |  
 |  cclleeaarr(self, decompose=False)
 |      Wipe out all children of this PageElement by calling extract()
 |         on them.
 |      
 |      :param decompose: If this is True, decompose() (a more
 |          destructive method) will be called instead of extract().
 |  
 |  ddeeccooddee__ccoonntteennttss(self, indent_level=None, eventual_encoding='utf-8', formatter='minimal')
 |      Renders the contents of this tag as a Unicode string.
 |      
 |      :param indent_level: Each line of the rendering will be
 |         indented this many levels. (The formatter decides what a
 |         'level' means in terms of spaces or other characters
 |         output.) Used internally in recursive calls while
 |         pretty-printing.
 |      
 |      :param eventual_encoding: The tag is destined to be
 |         encoded into this encoding. decode_contents() is _not_
 |         responsible for performing that encoding. This information
 |         is passed in so that it can be substituted in if the
 |         document contains a <META> tag that mentions the document's
 |         encoding.
 |      
 |      :param formatter: A Formatter object, or a string naming one of
 |          the standard Formatters.
 |  
 |  ddeeccoommppoossee(self)
 |      Recursively destroys this PageElement and its children.
 |      
 |      This element will be removed from the tree and wiped out; so
 |      will everything beneath it.
 |      
 |      The behavior of a decomposed PageElement is undefined and you
 |      should never use one for anything, but if you need to _check_
 |      whether an element has been decomposed, you can use the
 |      `decomposed` property.
 |  
 |  eennccooddee(self, encoding='utf-8', indent_level=None, formatter='minimal', errors='xmlcharrefreplace')
 |      Render a bytestring representation of this PageElement and its
 |      contents.
 |      
 |      :param encoding: The destination encoding.
 |      :param indent_level: Each line of the rendering will be
 |         indented this many levels. (The formatter decides what a
 |         'level' means in terms of spaces or other characters
 |         output.) Used internally in recursive calls while
 |         pretty-printing.
 |      :param formatter: A Formatter object, or a string naming one of
 |          the standard formatters.
 |      :param errors: An error handling strategy such as
 |          'xmlcharrefreplace'. This value is passed along into
 |          encode() and its value should be one of the constants
 |          defined by Python.
 |      :return: A bytestring.
 |  
 |  eennccooddee__ccoonntteennttss(self, indent_level=None, encoding='utf-8', formatter='minimal')
 |      Renders the contents of this PageElement as a bytestring.
 |      
 |      :param indent_level: Each line of the rendering will be
 |         indented this many levels. (The formatter decides what a
 |         'level' means in terms of spaces or other characters
 |         output.) Used internally in recursive calls while
 |         pretty-printing.
 |      
 |      :param eventual_encoding: The bytestring will be in this encoding.
 |      
 |      :param formatter: A Formatter object, or a string naming one of
 |          the standard Formatters.
 |      
 |      :return: A bytestring.
 |  
 |  ffiinndd(self, name=None, attrs={}, recursive=True, string=None, **kwargs)
 |      Look in the children of this PageElement and find the first
 |      PageElement that matches the given criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param recursive: If this is True, find() will perform a
 |          recursive search of this PageElement's children. Otherwise,
 |          only the direct children will be considered.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinnddAAllll = find_all(self, name=None, attrs={}, recursive=True, string=None, limit=None, **kwargs)
 |  
 |  ffiinnddCChhiilldd = find(self, name=None, attrs={}, recursive=True, string=None, **kwargs)
 |  
 |  ffiinnddCChhiillddrreenn = find_all(self, name=None, attrs={}, recursive=True, string=None, limit=None, **kwargs)
 |  
 |  ffiinndd__aallll(self, name=None, attrs={}, recursive=True, string=None, limit=None, **kwargs)
 |      Look in the children of this PageElement and find all
 |      PageElements that match the given criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param recursive: If this is True, find_all() will perform a
 |          recursive search of this PageElement's children. Otherwise,
 |          only the direct children will be considered.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A ResultSet of PageElements.
 |      :rtype: bs4.element.ResultSet
 |  
 |  ggeett(self, key, default=None)
 |      Returns the value of the 'key' attribute for the tag, or
 |      the value given for 'default' if it doesn't have that
 |      attribute.
 |  
 |  ggeett__aattttrriibbuuttee__lliisstt(self, key, default=None)
 |      The same as get(), but always returns a list.
 |      
 |      :param key: The attribute to look for.
 |      :param default: Use this value if the attribute is not present
 |          on this PageElement.
 |      :return: A list of values, probably containing only a single
 |          value.
 |  
 |  hhaass__aattttrr(self, key)
 |      Does this PageElement have an attribute with the given name?
 |  
 |  hhaass__kkeeyy(self, key)
 |      Deprecated method. This was kind of misleading because has_key()
 |      (attributes) was different from __in__ (contents).
 |      
 |      has_key() is gone in Python 3, anyway.
 |  
 |  iinnddeexx(self, element)
 |      Find the index of a child by identity, not value.
 |      
 |      Avoids issues with tag.contents.index(element) getting the
 |      index of equal elements.
 |      
 |      :param element: Look for this PageElement in `self.contents`.
 |  
 |  pprreettttiiffyy(self, encoding=None, formatter='minimal')
 |      Pretty-print this PageElement as a string.
 |      
 |      :param encoding: The eventual encoding of the string. If this is None,
 |          a Unicode string will be returned.
 |      :param formatter: A Formatter object, or a string naming one of
 |          the standard formatters.
 |      :return: A Unicode string (if encoding==None) or a bytestring 
 |          (otherwise).
 |  
 |  rreeccuurrssiivveeCChhiillddGGeenneerraattoorr(self)
 |      Deprecated generator.
 |  
 |  rreennddeerrCCoonntteennttss(self, encoding='utf-8', prettyPrint=False, indentLevel=0)
 |      Deprecated method for BS3 compatibility.
 |  
 |  sseelleecctt(self, selector, namespaces=None, limit=None, **kwargs)
 |      Perform a CSS selection operation on the current element.
 |      
 |      This uses the SoupSieve library.
 |      
 |      :param selector: A string containing a CSS selector.
 |      
 |      :param namespaces: A dictionary mapping namespace prefixes
 |         used in the CSS selector to namespace URIs. By default,
 |         Beautiful Soup will use the prefixes it encountered while
 |         parsing the document.
 |      
 |      :param limit: After finding this number of results, stop looking.
 |      
 |      :param kwargs: Keyword arguments to be passed into SoupSieve's 
 |         soupsieve.select() method.
 |      
 |      :return: A ResultSet of Tags.
 |      :rtype: bs4.element.ResultSet
 |  
 |  sseelleecctt__oonnee(self, selector, namespaces=None, **kwargs)
 |      Perform a CSS selection operation on the current element.
 |      
 |      :param selector: A CSS selector.
 |      
 |      :param namespaces: A dictionary mapping namespace prefixes
 |         used in the CSS selector to namespace URIs. By default,
 |         Beautiful Soup will use the prefixes it encountered while
 |         parsing the document.
 |      
 |      :param kwargs: Keyword arguments to be passed into SoupSieve's 
 |         soupsieve.select() method.
 |      
 |      :return: A Tag.
 |      :rtype: bs4.element.Tag
 |  
 |  ssmmooootthh(self)
 |      Smooth out this element's children by consolidating consecutive
 |      strings.
 |      
 |      This makes pretty-printed output look more natural following a
 |      lot of operations that modified the tree.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from bs4.element.Tag:
 |  
 |  cchhiillddrreenn
 |      Iterate over all direct children of this PageElement.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  ddeesscceennddaannttss
 |      Iterate over all children of this PageElement in a
 |      breadth-first sequence.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  iissSSeellffCClloossiinngg
 |      Is this tag an empty-element tag? (aka a self-closing tag)
 |      
 |      A tag that has contents is never an empty-element tag.
 |      
 |      A tag that has no contents may or may not be an empty-element
 |      tag. It depends on the builder used to create the tag. If the
 |      builder has a designated list of empty-element tags, then only
 |      a tag whose name shows up in that list is considered an
 |      empty-element tag.
 |      
 |      If the builder has no designated list of empty-element tags,
 |      then any tag with no contents is an empty-element tag.
 |  
 |  iiss__eemmppttyy__eelleemmeenntt
 |      Is this tag an empty-element tag? (aka a self-closing tag)
 |      
 |      A tag that has contents is never an empty-element tag.
 |      
 |      A tag that has no contents may or may not be an empty-element
 |      tag. It depends on the builder used to create the tag. If the
 |      builder has a designated list of empty-element tags, then only
 |      a tag whose name shows up in that list is considered an
 |      empty-element tag.
 |      
 |      If the builder has no designated list of empty-element tags,
 |      then any tag with no contents is an empty-element tag.
 |  
 |  ssttrriinnggss
 |      Yield all strings of certain classes, possibly stripping them.
 |      
 |      :param strip: If True, all strings will be stripped before being
 |          yielded.
 |      
 |      :param types: A tuple of NavigableString subclasses. Any strings of
 |          a subclass not found in this list will be ignored. By
 |          default, the subclasses considered are the ones found in
 |          self.interesting_string_types. If that's not specified,
 |          only NavigableString and CData objects will be
 |          considered. That means no comments, processing
 |          instructions, etc.
 |      
 |      :yield: A sequence of strings.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from bs4.element.Tag:
 |  
 |  ppaarrsseerrCCllaassss
 |  
 |  ssttrriinngg
 |      Convenience property to get the single string within this
 |      PageElement.
 |      
 |      TODO It might make sense to have NavigableString.string return
 |      itself.
 |      
 |      :return: If this element has a single string child, return
 |       value is that string. If this element has one child tag,
 |       return value is the 'string' attribute of the child tag,
 |       recursively. If this element is itself a string, has no
 |       children, or has more than one child, return value is None.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from bs4.element.Tag:
 |  
 |  DDEEFFAAUULLTT__IINNTTEERREESSTTIINNGG__SSTTRRIINNGG__TTYYPPEESS = (<class 'bs4.element.NavigableStrin...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from bs4.element.PageElement:
 |  
 |  aappppeenndd(self, tag)
 |      Appends the given PageElement to the contents of this one.
 |      
 |      :param tag: A PageElement.
 |  
 |  eexxtteenndd(self, tags)
 |      Appends the given PageElements to this one's contents.
 |      
 |      :param tags: A list of PageElements. If a single Tag is
 |          provided instead, this PageElement's contents will be extended
 |          with that Tag's contents.
 |  
 |  eexxttrraacctt(self, _self_index=None)
 |      Destructively rips this element out of the tree.
 |      
 |      :param _self_index: The location of this element in its parent's
 |         .contents, if known. Passing this in allows for a performance
 |         optimization.
 |      
 |      :return: `self`, no longer part of the tree.
 |  
 |  ffeettcchhNNeexxttSSiibblliinnggss = find_next_siblings(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffeettcchhPPaarreennttss = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
 |  
 |  ffeettcchhPPrreevviioouuss = find_all_previous(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffeettcchhPPrreevviioouussSSiibblliinnggss = find_previous_siblings(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffiinnddAAllllNNeexxtt = find_all_next(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffiinnddAAllllPPrreevviioouuss = find_all_previous(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffiinnddNNeexxtt = find_next(self, name=None, attrs={}, string=None, **kwargs)
 |  
 |  ffiinnddNNeexxttSSiibblliinngg = find_next_sibling(self, name=None, attrs={}, string=None, **kwargs)
 |  
 |  ffiinnddNNeexxttSSiibblliinnggss = find_next_siblings(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffiinnddPPaarreenntt = find_parent(self, name=None, attrs={}, **kwargs)
 |  
 |  ffiinnddPPaarreennttss = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
 |  
 |  ffiinnddPPrreevviioouuss = find_previous(self, name=None, attrs={}, string=None, **kwargs)
 |  
 |  ffiinnddPPrreevviioouussSSiibblliinngg = find_previous_sibling(self, name=None, attrs={}, string=None, **kwargs)
 |  
 |  ffiinnddPPrreevviioouussSSiibblliinnggss = find_previous_siblings(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |  
 |  ffiinndd__aallll__nneexxtt(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |      Find all PageElements that match the given criteria and appear
 |      later in the document than this PageElement.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A ResultSet containing PageElements.
 |  
 |  ffiinndd__aallll__pprreevviioouuss(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |      Look backwards in the document from this PageElement and find all
 |      PageElements that match the given criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A ResultSet of PageElements.
 |      :rtype: bs4.element.ResultSet
 |  
 |  ffiinndd__nneexxtt(self, name=None, attrs={}, string=None, **kwargs)
 |      Find the first PageElement that matches the given criteria and
 |      appears later in the document than this PageElement.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__nneexxtt__ssiibblliinngg(self, name=None, attrs={}, string=None, **kwargs)
 |      Find the closest sibling to this PageElement that matches the
 |      given criteria and appears later in the document.
 |      
 |      All find_* methods take a common set of arguments. See the
 |      online documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__nneexxtt__ssiibblliinnggss(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |      Find all siblings of this PageElement that match the given criteria
 |      and appear later in the document.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A ResultSet of PageElements.
 |      :rtype: bs4.element.ResultSet
 |  
 |  ffiinndd__ppaarreenntt(self, name=None, attrs={}, **kwargs)
 |      Find the closest parent of this PageElement that matches the given
 |      criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :kwargs: A dictionary of filters on attribute values.
 |      
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__ppaarreennttss(self, name=None, attrs={}, limit=None, **kwargs)
 |      Find all parents of this PageElement that match the given criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__pprreevviioouuss(self, name=None, attrs={}, string=None, **kwargs)
 |      Look backwards in the document from this PageElement and find the
 |      first PageElement that matches the given criteria.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__pprreevviioouuss__ssiibblliinngg(self, name=None, attrs={}, string=None, **kwargs)
 |      Returns the closest sibling to this PageElement that matches the
 |      given criteria and appears earlier in the document.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  ffiinndd__pprreevviioouuss__ssiibblliinnggss(self, name=None, attrs={}, string=None, limit=None, **kwargs)
 |      Returns all siblings to this PageElement that match the
 |      given criteria and appear earlier in the document.
 |      
 |      All find_* methods take a common set of arguments. See the online
 |      documentation for detailed explanations.
 |      
 |      :param name: A filter on tag name.
 |      :param attrs: A dictionary of filters on attribute values.
 |      :param string: A filter for a NavigableString with specific text.
 |      :param limit: Stop looking after finding this many results.
 |      :kwargs: A dictionary of filters on attribute values.
 |      :return: A ResultSet of PageElements.
 |      :rtype: bs4.element.ResultSet
 |  
 |  ffoorrmmaatt__ssttrriinngg(self, s, formatter)
 |      Format the given string using the given formatter.
 |      
 |      :param s: A string.
 |      :param formatter: A Formatter object, or a string naming one of the standard formatters.
 |  
 |  ffoorrmmaatttteerr__ffoorr__nnaammee(self, formatter)
 |      Look up or create a Formatter for the given identifier,
 |      if necessary.
 |      
 |      :param formatter: Can be a Formatter object (used as-is), a
 |          function (used as the entity substitution hook for an
 |          XMLFormatter or HTMLFormatter), or a string (used to look
 |          up an XMLFormatter or HTMLFormatter in the appropriate
 |          registry.
 |  
 |  ggeettTTeexxtt = get_text(self, separator='', strip=False, types=<object object at 0x7f03f0d48740>)
 |  
 |  ggeett__tteexxtt(self, separator='', strip=False, types=<object object at 0x7f03f0d48740>)
 |      Get all child strings of this PageElement, concatenated using the
 |      given separator.
 |      
 |      :param separator: Strings will be concatenated using this separator.
 |      
 |      :param strip: If True, strings will be stripped before being
 |          concatenated.
 |      
 |      :param types: A tuple of NavigableString subclasses. Any
 |          strings of a subclass not found in this list will be
 |          ignored. Although there are exceptions, the default
 |          behavior in most cases is to consider only NavigableString
 |          and CData objects. That means no comments, processing
 |          instructions, etc.
 |      
 |      :return: A string.
 |  
 |  iinnsseerrtt(self, position, new_child)
 |      Insert a new PageElement in the list of this PageElement's children.
 |      
 |      This works the same way as `list.insert`.
 |      
 |      :param position: The numeric position that should be occupied
 |         in `self.children` by the new PageElement. 
 |      :param new_child: A PageElement.
 |  
 |  nneexxttGGeenneerraattoorr(self)
 |      # Old non-property versions of the generators, for backwards
 |      # compatibility with BS3.
 |  
 |  nneexxttSSiibblliinnggGGeenneerraattoorr(self)
 |  
 |  ppaarreennttGGeenneerraattoorr(self)
 |  
 |  pprreevviioouussGGeenneerraattoorr(self)
 |  
 |  pprreevviioouussSSiibblliinnggGGeenneerraattoorr(self)
 |  
 |  rreeppllaacceeWWiitthh = replace_with(self, *args)
 |  
 |  rreeppllaacceeWWiitthhCChhiillddrreenn = unwrap(self)
 |  
 |  rreeppllaaccee__wwiitthh(self, *args)
 |      Replace this PageElement with one or more PageElements, keeping the 
 |      rest of the tree the same.
 |      
 |      :param args: One or more PageElements.
 |      :return: `self`, no longer part of the tree.
 |  
 |  rreeppllaaccee__wwiitthh__cchhiillddrreenn = unwrap(self)
 |  
 |  sseettuupp(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
 |      Sets up the initial relations between this element and
 |      other elements.
 |      
 |      :param parent: The parent of this element.
 |      
 |      :param previous_element: The element parsed immediately before
 |          this one.
 |      
 |      :param next_element: The element parsed immediately before
 |          this one.
 |      
 |      :param previous_sibling: The most recently encountered element
 |          on the same level of the parse tree as this one.
 |      
 |      :param previous_sibling: The next element to be encountered
 |          on the same level of the parse tree as this one.
 |  
 |  uunnwwrraapp(self)
 |      Replace this PageElement with its contents.
 |      
 |      :return: `self`, no longer part of the tree.
 |  
 |  wwrraapp(self, wrap_inside)
 |      Wrap this PageElement inside another one.
 |      
 |      :param wrap_inside: A PageElement.
 |      :return: `wrap_inside`, occupying the position in the tree that used
 |         to be occupied by `self`, and with `self` inside it.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from bs4.element.PageElement:
 |  
 |  ddeeccoommppoosseedd
 |      Check whether a PageElement has been decomposed.
 |      
 |      :rtype: bool
 |  
 |  nneexxtt
 |      The PageElement, if any, that was parsed just after this one.
 |      
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  nneexxtt__eelleemmeennttss
 |      All PageElements that were parsed after this one.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  nneexxtt__ssiibblliinnggss
 |      All PageElements that are siblings of this one but were parsed
 |      later.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  ppaarreennttss
 |      All PageElements that are parents of this PageElement.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  pprreevviioouuss
 |      The PageElement, if any, that was parsed just before this one.
 |      
 |      :return: A PageElement.
 |      :rtype: bs4.element.Tag | bs4.element.NavigableString
 |  
 |  pprreevviioouuss__eelleemmeennttss
 |      All PageElements that were parsed before this one.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  pprreevviioouuss__ssiibblliinnggss
 |      All PageElements that are siblings of this one but were parsed
 |      earlier.
 |      
 |      :yield: A sequence of PageElements.
 |  
 |  ssttrriippppeedd__ssttrriinnggss
 |      Yield all strings in this PageElement, stripping them first.
 |      
 |      :yield: A sequence of stripped strings.
 |  
 |  tteexxtt
 |      Get all child strings of this PageElement, concatenated using the
 |      given separator.
 |      
 |      :param separator: Strings will be concatenated using this separator.
 |      
 |      :param strip: If True, strings will be stripped before being
 |          concatenated.
 |      
 |      :param types: A tuple of NavigableString subclasses. Any
 |          strings of a subclass not found in this list will be
 |          ignored. Although there are exceptions, the default
 |          behavior in most cases is to consider only NavigableString
 |          and CData objects. That means no comments, processing
 |          instructions, etc.
 |      
 |      :return: A string.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from bs4.element.PageElement:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  nneexxttSSiibblliinngg
 |  
 |  pprreevviioouussSSiibblliinngg
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from bs4.element.PageElement:
 |  
 |  ddeeffaauulltt = <object object>
